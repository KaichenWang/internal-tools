{"version":3,"sources":["assets/banner.png","constants.js","components/home.js","utilities.js","components/removeUnreferencedStrings.js","components/remapTranslations.js","components/extractLinks.js","App.js","index.js"],"names":["module","exports","constants","utilities","path","title","description","locales","utils","Home","Section","alt","src","banner","style","width","marginBottom","Object","keys","map","key","oneHalf","to","Header","target","href","display","alignItems","paddingRight","source","ExternalSmallMinor","length","flattenObject","ob","toReturn","i","hasOwnProperty","flatObject","x","unflattenObject","data","result","split","reduce","r","e","j","isNaN","Number","download","filename","text","Promise","resolve","reject","setTimeout","element","document","createElement","setAttribute","encodeURIComponent","body","appendChild","click","removeChild","RemoveUnreferencedStrings","props","onChangeHandlerSchema","schema","setState","onChangeHandlerLang","lang","onClickHandlerVerify","isVerified","flat","JSON","parse","state","notFound","forEach","indexOf","push","newLang","stringify","undefined","breadcrumbs","content","url","process","primaryFooterAction","onAction","this","bind","onChange","value","height","resize","status","type","Item","readOnly","React","Component","RemapTranslations","reset","complete","error","message","onChangeHandlerNew","enNew","locale","langOld","onChangeHandlerUpload","files","readFile","file","reader","FileReader","onload","name","substr","lastIndexOf","includes","readAsText","Array","from","previousPromise","a","then","onClickHandlerRemap","missing","translate","langKey","flatNew","flatOld","flatLangOld","object","val","keyOld","find","unflat","translation","Error","subdued","label","onDrop","FileUpload","Fragment","marginTop","extractLinks","onChangeHandlerText","onChangeHandlerAppend","append","onClickHandlerExtract","urls","match","links","link","App","basename","ReactDOM","render","i18n","enTranslations","getElementById"],"mappings":"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","file":"static/js/main.351b6e58.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/banner.b4044a15.png\";","\nconst constants = {\n    utilities: {\n        '1': {\n            path: '/remove-unreferenced-strings',\n            title: 'Find unreferenced locale strings',\n            description: 'This utility verifies if any strings in a locale file (en.json) are unreferenced in schema.json'\n        },\n        '2': {\n            path: '/remap-translations',\n            title: 'Remap translation strings',\n            description: 'This utility remaps locale files to a new structure'\n        },\n        '3': {\n            path: '/extract-links',\n            title: 'Extract links',\n            description: 'This utility extracts links from a block of text'\n        }\n    },\n    locales: [\n        'da',\n        'de',\n        'en',\n        'es',\n        'fi',\n        'fr',\n        'hi',\n        'it',\n        'ja',\n        'ko',\n        'ms',\n        'nb',\n        'nl',\n        'pt-BR',\n        'pt-PT',\n        'sv',\n        'th',\n        'zh-CN',\n        'zh-TW'\n    ]\n}\n\nexport default constants;","import React from 'react';\nimport {\n    Layout,\n    Page,\n    Card,\n    Button,\n    Badge,\n    Icon\n} from '@shopify/polaris';\nimport { ExternalSmallMinor } from '@shopify/polaris-icons';\nimport banner from '../assets/banner.png';\nimport constants from '../constants'\n\nimport {\n    Link\n} from \"react-router-dom\";\n\n\nconst utils = constants.utilities;\n\nfunction Home() {\n    return (\n        <Page title=\"Utilities\">\n            <Layout>\n                <Layout.Section>\n                    <img alt=\"Utilities\" src={banner} style={{ width: \"100%\", marginBottom: \"1em\" }}></img>\n                </Layout.Section>\n            </Layout>\n            <Layout>\n                {Object.keys(utils).map(key => {\n                    return (\n                        <Layout.Section oneHalf key={key}>\n                            <Card title={utils[key].title}>\n                                <Card.Section>{utils[key].description}</Card.Section>\n                                <Card.Section>\n                                    <Link to={utils[key].path}>\n                                        <Button>Try it</Button>\n                                    </Link>\n                                </Card.Section>\n                            </Card>\n                        </Layout.Section>\n                    );\n                })}\n                <Layout.Section oneHalf>\n                    <Card>\n                        <Card.Header title=\"Toggle all collapsibles\">\n                            <Badge>Chrome extension</Badge>\n                        </Card.Header>\n                        <Card.Section>\n                            Toggles all collapsibles on a page from \"themes.shopify.com\" with one click\n                        </Card.Section>\n                        <Card.Section>\n                            <a target=\"_blank\" href=\"https://chrome.google.com/webstore/detail/toggle-all-collapsibles/abecpmipjeckjjnkddmjaphidooeinid\">\n                                <Button>\n                                    <div style={{ display: \"flex\", alignItems: \"center\" }}>\n                                        <span style={{ paddingRight: \"0.5em\" }}>Try it</span>\n                                        <Icon source={ExternalSmallMinor} />\n                                    </div>\n                                </Button>\n                            </a>\n                        </Card.Section>\n                    </Card>\n                </Layout.Section>\n                {Object.keys(utils).length % 2 + 1 !== 0 &&\n                    <Layout.Section oneHalf></Layout.Section>\n                }\n            </Layout>\n        </Page>\n    );\n}\n\nexport default Home;","export const flattenObject = (ob) => {\n    var toReturn = {};\n\n    for (var i in ob) {\n        if (!ob.hasOwnProperty(i)) continue;\n\n        if ((typeof ob[i]) == 'object' && ob[i] !== null) {\n            var flatObject = flattenObject(ob[i]);\n            for (var x in flatObject) {\n                if (!flatObject.hasOwnProperty(x)) continue;\n\n                toReturn[i + '.' + x] = flatObject[x];\n            }\n        } else {\n            toReturn[i] = ob[i];\n        }\n    }\n    return toReturn;\n}\n\nexport const unflattenObject = (data) => {\n  var result = {}\n  for (var i in data) {\n    var keys = i.split('.')\n    keys.reduce(function(r, e, j) {\n      return r[e] || (r[e] = isNaN(Number(keys[j + 1])) ? (keys.length - 1 == j ? data[i] : {}) : [])\n    }, result)\n  }\n  return result\n}\n\nexport const download = (filename, text) => {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      var element = document.createElement('a');\n      element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));\n      element.setAttribute('download', filename);\n\n      element.style.display = 'none';\n      document.body.appendChild(element);\n\n      element.click();\n\n      document.body.removeChild(element);\n\n      resolve(\"Success!\");\n    }, 150);\n  });\n}\n\nexport const getKeyByValue = (object, value) => {\n  return Object.keys(object).find(key => object[key] === value);\n}","import React from 'react';\nimport {\n    Layout,\n    Page,\n    Card,\n    TextContainer,\n    Banner,\n    FormLayout,\n    List\n} from '@shopify/polaris';\n\nimport constants from '../constants'\nimport { flattenObject, unflattenObject } from '../utilities'\n\nconst utils = constants.utilities;\n\nclass RemoveUnreferencedStrings extends React.Component {\n\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            schema: '',\n            lang: '',\n            isVerified: false,\n            keys: [],\n            newLang: ''\n        }\n    }\n\n    onChangeHandlerSchema = (schema) => {\n        this.setState({\n            schema\n        })\n    }\n\n    onChangeHandlerLang = (lang) => {\n        this.setState({\n            lang\n        })\n    }\n\n    onClickHandlerVerify = () => {\n        this.setState({\n            isVerified: false\n        });\n        const flat = flattenObject(JSON.parse(this.state.lang));\n        const notFound = [];\n        Object.keys(flat).forEach(key => {\n            if (this.state.schema.indexOf(key) === -1) {\n                delete flat[key];\n                notFound.push(key);\n            }\n        });\n        this.setState({\n            keys: notFound,\n            isVerified: true,\n            newLang: JSON.stringify(unflattenObject(flat), undefined, 2)\n        });\n    }\n\n    render() {\n        return (\n            <Page title={utils[1].title} breadcrumbs={[{ content: 'Utilities', url: process.env.PUBLIC_URL}]}>\n                <Layout>\n                    <Layout.Section>\n                        <TextContainer>\n                            <p>{utils[1].description}</p>\n                        </TextContainer>\n                    </Layout.Section>\n                    <Layout.Section>\n                        <Card primaryFooterAction={{ content: 'Verify', onAction: this.onClickHandlerVerify.bind(this) }}>\n                            <Card.Section>\n                                <FormLayout>\n                                    <label>schema.json</label>\n                                    <textarea onChange={(e) => this.onChangeHandlerSchema(e.target.value)} style={{ width: \"100%\", height: \"180px\", resize: \"none\" }} ></textarea>\n\n                                    <label>en.json</label>\n                                    <textarea onChange={(e) => this.onChangeHandlerLang(e.target.value)} style={{ width: \"100%\", height: \"180px\", resize: \"none\" }} ></textarea>\n                                </FormLayout>\n                            </Card.Section>\n                        </Card>\n                    </Layout.Section>\n                    {this.state.isVerified &&\n                        <Layout.Section>\n                            {this.state.keys.length === 0 &&\n                                <Banner\n                                    title=\"All keys in en.json are used in schema\"\n                                    status=\"success\"\n                                />\n                            }\n                            {this.state.keys.length > 0 &&\n                                <Banner\n                                    title=\"Following keys from en.json are not used in schema and have been removed:\"\n                                    status=\"success\"\n                                >\n\n                                    <List type=\"bullet\">\n                                        {this.state.keys.map(key => {\n                                            return (<List.Item key={key}>{key}</List.Item>)\n                                        })}\n                                    </List>\n\n                                </Banner>\n                            }\n                            {this.state.keys.length > 0 &&\n                                <Card>\n                                    <Card.Section>\n                                        <FormLayout>\n                                            <label>Updated en.json</label>\n                                            <textarea value={this.state.newLang} readOnly style={{ width: \"100%\", height: \"180px\", resize: \"none\" }} ></textarea>\n                                        </FormLayout>\n                                    </Card.Section>\n                                </Card>\n                            }\n                        </Layout.Section>\n                    }\n                </Layout>\n            </Page>\n        );\n    }\n}\n\nexport default RemoveUnreferencedStrings;","import React from 'react';\nimport {\n    Layout,\n    Page,\n    Card,\n    TextContainer,\n    FormLayout,\n    Badge,\n    Banner,\n    List,\n    DropZone\n} from '@shopify/polaris';\n\nimport constants from '../constants'\nimport { flattenObject, unflattenObject, download, getKeyByValue } from '../utilities'\n\nconst utils = constants.utilities;\n\nclass RemapTranslations extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            enNew: '',\n            langOld: {},\n            missing: [],\n            complete: false,\n            error: {\n                title: '',\n                message: ''\n            },\n        }\n    }\n\n    reset = () => {\n        this.setState({\n            complete: false,\n            error: {\n                title: '',\n                message: ''\n            }\n        })\n    }\n\n    onChangeHandlerNew = (enNew) => {\n        this.reset();\n        this.setState({\n            enNew\n        })\n    }\n\n    onChangeHandlerLang = (locale, lang) => {\n        this.reset();\n        const langOld = {\n            ...this.state.langOld\n        }\n        if (lang === '') {\n            delete langOld[locale];\n        }\n        else {\n            langOld[locale] = lang;\n        }\n        this.setState({\n            langOld\n        })\n    }\n\n    onChangeHandlerUpload = (files) => {\n        this.reset();\n        const langOld = {};\n\n        const readFile = (file) => {\n            return new Promise((resolve, reject) => {\n                var reader = new FileReader();\n                reader.onload = () => {\n                    const key = file.name.substr(0, file.name.lastIndexOf('.'));\n                    if (constants.locales.includes(key)) {\n                        langOld[key] = reader.result;\n                    }\n                    resolve();\n                }\n                reader.readAsText(file);\n            })\n        }\n\n        Array.from(files).reduce(async (previousPromise, file) => {\n            await previousPromise;\n\n            return readFile(file);\n        }, Promise.resolve()).then(() => {\n            this.setState({\n                langOld\n            });\n        });\n    }\n\n    onClickHandlerRemap = () => {\n        this.reset();\n        const state = this.state;\n        const missing = [];\n\n        if (state.enNew.length === 0) {\n            this.setState({\n                error: {\n                    title: 'Error',\n                    message: 'No updated en.json defined'\n                }\n            });\n            return -1;\n        }\n\n        if (Object.keys(state.langOld).length === 0) {\n            this.setState({\n                error: {\n                    title: 'Error',\n                    message: 'No locale files defined'\n                }\n            });\n            return -1;\n        }\n\n\n        function translate(langOld, langKey) {\n            try {\n                var result = flattenObject(JSON.parse(state.enNew));\n                var flatNew = flattenObject(JSON.parse(state.enNew));\n                var flatOld = flattenObject(JSON.parse(state.langOld['en']));\n                var flatLangOld = flattenObject(JSON.parse(langOld));\n\n                Object.keys(flatNew).forEach((key) => {\n                    var val = flatNew[key];\n                    var keyOld = getKeyByValue(flatOld, val);\n                    if (keyOld) {\n                        result[key] = flatLangOld[keyOld];\n                    }\n                    else {\n                        delete result[key]\n                        missing.push(`${langKey}.json - ${key}`)\n                    }\n                });\n\n                const unflat = unflattenObject(result);\n                const unflatString = JSON.stringify(unflat, undefined, 2);\n                return unflatString;\n            }\n            catch (error) {\n                return error;\n            }\n        }\n\n        Object.keys(state.langOld).reduce(async (previousPromise, key) => {\n            await previousPromise;\n            if (key !== 'en') {\n                const translation = translate(state.langOld[key], key);\n                if (translation instanceof Error) {\n                    this.setState({\n                        error: {\n                            title: 'Error',\n                            message: translation.message\n                        }\n                    });\n                    return Promise.reject();\n                }\n                else {\n                    return download(`${key}.json`, translation);\n                }\n            } else {\n                return Promise.resolve();\n            }\n        }, Promise.resolve()).then(() => {\n            this.setState({\n                missing,\n                complete: true\n            });\n        });\n    }\n\n    render() {\n        return (\n            <Page title={utils[2].title} breadcrumbs={[{ content: 'Utilities', url: process.env.PUBLIC_URL }]}>\n                <Layout>\n                    <Layout.Section>\n                        <TextContainer>\n                            <p>{utils[2].description}</p>\n                        </TextContainer>\n                    </Layout.Section>\n                    <Layout.Section>\n                        <Card primaryFooterAction={{ content: 'Download updated locales', onAction: this.onClickHandlerRemap.bind(this) }}>\n                            <Card.Section subdued>\n                                <FormLayout>\n                                    <Badge status=\"success\">Updated file</Badge>\n                                    <label>en.json</label>\n                                    <textarea value={this.state.enNew} onChange={(e) => this.onChangeHandlerNew(e.target.value)} style={{ width: \"100%\", height: \"100px\", resize: \"none\" }} ></textarea>\n                                </FormLayout>\n                            </Card.Section>\n                            <Card.Section>\n                                <FormLayout>\n                                    <Badge status=\"attention\">Original files</Badge>\n                                    <DropZone label=\"Select locale files\" onDrop={e => { this.onChangeHandlerUpload(e) }}>\n                                        <DropZone.FileUpload />\n                                    </DropZone>\n\n                                    {constants.locales.map(locale => {\n                                        return (\n                                            <React.Fragment key={locale}>\n                                                <label>{locale}.json</label>\n                                                <textarea value={this.state.langOld[locale]} onChange={(e) => this.onChangeHandlerLang(locale, e.target.value)} style={{ width: \"100%\", height: \"100px\", resize: \"none\", marginTop: \"1em\" }} ></textarea>\n                                            </React.Fragment>\n                                        )\n                                    })}\n                                </FormLayout>\n                            </Card.Section>\n                        </Card>\n                    </Layout.Section>\n                    <Layout.Section>\n                        {this.state.complete &&\n                            <Banner\n                                title=\"Files downloaded\"\n                                status=\"success\"\n                            />\n                        }\n                        {this.state.complete && this.state.missing.length > 0 &&\n                            <Banner\n                                title=\"Following translations could not be remapped:\"\n                                status=\"warning\"\n                            >\n                                <List type=\"bullet\">\n                                    {this.state.missing.map(key => {\n                                        return (<List.Item key={key}>{key}</List.Item>)\n                                    })}\n                                </List>\n                            </Banner>\n                        }\n                        {this.state.error.title.length > 0 &&\n                            <Banner\n                                title={this.state.error.title}\n                                status=\"critical\"\n                            >\n                                <p>{this.state.error.message}</p>\n                            </Banner>\n                        }\n                    </Layout.Section>\n                </Layout>\n            </Page >\n        );\n    }\n}\n\nexport default RemapTranslations;","import React from 'react';\nimport {\n    Layout,\n    Page,\n    Card,\n    TextContainer,\n    FormLayout,\n    Banner,\n    List,\n    TextField\n} from '@shopify/polaris';\n\nimport constants from '../constants'\n\nconst utils = constants.utilities;\n\nclass extractLinks extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            text: '',\n            append: '',\n            links: [],\n            complete: false\n        }\n    }\n\n    onChangeHandlerText = (text) => {\n        this.setState({\n            text,\n            complete: false\n        })\n    }\n\n    onChangeHandlerAppend = (append) => {\n        this.setState({\n            append,\n            complete: false\n        })\n    }\n\n    onClickHandlerExtract = () => {\n        const urls = this.state.text.match(/(\\b(https?|ftp|file):\\/\\/[-A-Z0-9+&@#\\/%?=~_|!:,.;]*[-A-Z0-9+&@#\\/%=~_|])/ig);\n\n        const links = urls ? urls.map(url => {\n            return `${url}${this.state.append}`\n        }) : [];\n\n        this.setState({\n            links,\n            complete: true\n        });\n    }\n\n    render() {\n        return (\n            <Page title={utils[3].title} breadcrumbs={[{ content: 'Utilities', url: process.env.PUBLIC_URL }]}>\n                <Layout>\n                    <Layout.Section>\n                        <TextContainer>\n                            <p>{utils[3].description}</p>\n                        </TextContainer>\n                    </Layout.Section>\n                    <Layout.Section>\n                        <Card primaryFooterAction={{ content: 'Extract links', onAction: this.onClickHandlerExtract.bind(this) }}>\n                            <Card.Section>\n                                <FormLayout>\n                                    <label>Text</label>\n                                    <textarea\n                                        value={this.state.text}\n                                        onChange={(e) => this.onChangeHandlerText(e.target.value)}\n                                        style={{ width: \"100%\", height: \"180px\", resize: \"none\" }}>\n                                    </textarea>\n                                    <TextField label=\"Append links with\" value={this.state.append} onChange={(value) => this.onChangeHandlerAppend(value)} />\n                                </FormLayout>\n                            </Card.Section>\n                        </Card>\n                    </Layout.Section>\n                    {this.state.complete &&\n                        <Layout.Section>\n                            {this.state.links.length > 0 &&\n                                <Banner\n                                    title=\"Links extracted\"\n                                    status=\"success\"\n                                />\n                            }\n                            {this.state.links.length > 0 &&\n                                <Card>\n                                    <Card.Section>\n                                        <List type=\"bullet\">\n                                            {this.state.links.map(link => {\n                                                return (\n                                                    <List.Item key={link}>\n                                                        <a target=\"_blank\" href={link}>{link}</a>\n                                                    </List.Item>\n                                                )\n                                            })}\n                                        </List>\n                                    </Card.Section>\n                                </Card>\n                            }\n                            {this.state.links.length === 0 &&\n                                <Banner\n                                    title=\"No links found\"\n                                    status=\"warning\"\n                                />\n                            }\n                        </Layout.Section>\n                    }\n                </Layout>\n            </Page >\n        );\n    }\n}\n\nexport default extractLinks;","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\nimport constants from './constants';\nimport Home from './components/home';\nimport RemoveUnreferencedStrings from './components/removeUnreferencedStrings';\nimport RemapTranslations from './components/remapTranslations';\nimport ExtractLinks from './components/extractLinks';\n\nconst utils = constants.utilities;\n\nexport default function App() {\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <Switch>\n        <Route path={utils[1].path}>\n          <RemoveUnreferencedStrings />\n        </Route>\n        <Route path={utils[2].path}>\n          <RemapTranslations />\n        </Route>\n        <Route path={utils[3].path}>\n          <ExtractLinks />\n        </Route>\n        <Route path=\"/\">\n          <Home />\n        </Route>\n      </Switch>\n    </Router>\n  );\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '@shopify/polaris/styles.css';\nimport {AppProvider} from '@shopify/polaris';\nimport enTranslations from '@shopify/polaris/locales/en.json';\n\nimport App from './App';\n\nfunction WrappedApp() {\n  return (\n    <AppProvider i18n={enTranslations}>\n      <App />\n    </AppProvider>\n  );\n}\n\nReactDOM.render(<WrappedApp />, document.getElementById('root'));\n"],"sourceRoot":""}